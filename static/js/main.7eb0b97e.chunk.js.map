{"version":3,"sources":["components/SearchInput.js","components/Header.js","components/Profile.js","components/RepoDetails.js","components/Repo.js","components/MainBody.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","usercontext","useContext","UserContext","findMatchString","value","searchvalue","usestate","searchValue","toUpperCase","login","startsWith","useEffect","axios","get","then","res","console","log","data","usedispatch","type","catch","err","allusers","users","filter","className","onFocus","onChange","e","target","placeholder","size","showList","length","map","item","key","id","onClick","selectedUser","Header","Profile","user","url","src","avatar_url","width","height","userInfo","name","location","email","twitter_username","followers","following","public_repos","bio","RepoDetails","repo","full_name","description","fork","created_at","updated_at","pushed_at","language","forks_count","open_issues","watchers","default_branch","columns","title","dataIndex","render","text","record","Repo","repos_url","showRepos","RollbackOutlined","repoData","onRow","rowIndex","event","onDoubleClick","onContextMenu","onMouseEnter","onMouseLeave","dataSource","MainBody","React","createContext","initialState","reducer","state","action","App","useReducer","userData","dispatch","Provider","Object","keys","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7eb0b97e.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { UserContext } from \"../App\";\r\n\r\nfunction SearchInput(props) {\r\n  const usercontext = useContext(UserContext);\r\n\r\n  let getAllUsers = () => {\r\n    axios\r\n      .get(\"https://api.github.com/users\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        usercontext.usedispatch({ type: \"setAllUsers\", value: res.data });\r\n        usercontext.usedispatch({ type: \"setUsers\", value: res.data });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  let onChange = (e) => {\r\n    usercontext.usedispatch({ type: \"setSearchValue\", value: e.target.value });\r\n  };\r\n\r\n  let listItemClick = (selectedUser) => {\r\n    usercontext.usedispatch({ type: \"setSearchValue\", value: selectedUser.login });\r\n    usercontext.usedispatch({ type: \"setShowList\", value: false });\r\n    usercontext.usedispatch({ type: \"setUser\", value: selectedUser });\r\n  };\r\n\r\n  let checkList = () => {\r\n    let options = usercontext.usestate.allusers;\r\n    let displayValue = options.filter(findMatchString);\r\n    return displayValue;\r\n  };\r\n\r\n  let findMatchString = (value) => {\r\n    let searchvalue = usercontext.usestate.searchValue.toUpperCase();\r\n    let displayValue = value.login.toUpperCase();\r\n    return displayValue.startsWith(searchvalue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (usercontext.usestate.searchValue === \"\") return usercontext.usedispatch({ type: \"setUsers\", value: usercontext.usestate.allusers });\r\n    let users = checkList();\r\n    usercontext.usedispatch({ type: \"setUsers\", value: users });\r\n  }, [usercontext.usestate.searchValue]);\r\n\r\n  return (\r\n    <div className=\"search-div\">\r\n      <input\r\n        onFocus={() => usercontext.usedispatch({ type: \"setShowList\", value: true })}\r\n        //onBlur={() => setTimeout(() => usercontext.usedispatch({ type: \"setShowList\", value: false }), 500)}\r\n        onChange={(e) => onChange(e)}\r\n        value={usercontext.usestate.searchValue}\r\n        className=\"search-input\"\r\n        type=\"text\"\r\n        placeholder=\"Search user name\"\r\n        size=\"30\"\r\n      />\r\n      {usercontext.usestate.showList && (\r\n        <ul className=\"search-ul\">\r\n          {usercontext.usestate.users.length > 0 ? (\r\n            usercontext.usestate.users.map((item) => (\r\n              <li\r\n                className=\"user-name\"\r\n                key={item.id}\r\n                value={item.login}\r\n                onClick={() => listItemClick(item)}\r\n              >\r\n                {item.login}\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <li className=\"no-user\">No data found</li>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchInput;\r\n","import React from 'react'\r\nimport SearchInput from './SearchInput'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"app-name\">APP_name</div>\r\n            <SearchInput/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext,useEffect,useState } from \"react\";\r\nimport { UserContext } from \"../App\";\r\nimport axios from 'axios';\r\n\r\nfunction Profile() {\r\n  const usercontext = useContext(UserContext);\r\n\r\n  useEffect(()=>{\r\n    axios.get(usercontext.usestate.user.url).then((res)=>usercontext.usedispatch({ type: \"setUserInfo\", value: res.data })).catch((err)=>console.log(err))\r\n  },[usercontext.usestate.user]);\r\n  return (\r\n    <div className=\"profile-main-div\">\r\n        \r\n          <img className=\"profile-img\" src={usercontext.usestate.user.avatar_url} width=\"150\" height=\"150\" />\r\n          <p>Log in : {usercontext.usestate.user.login}</p>\r\n          <p>Name : {usercontext.usestate.userInfo.name}</p>\r\n          <p>Location : {usercontext.usestate.userInfo.location}</p>\r\n          <p>Email ID : {usercontext.usestate.userInfo.email}</p>\r\n          <p>Twitter : {usercontext.usestate.userInfo.twitter_username}</p>\r\n          <p>Followers : {usercontext.usestate.userInfo.followers}</p>\r\n          <p>Following : {usercontext.usestate.userInfo.following}</p>\r\n          <p>No of Public Repo : {usercontext.usestate.userInfo.public_repos}</p>\r\n          <p>Bio : {usercontext.usestate.userInfo.bio}</p>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React,{ useContext} from 'react';\r\nimport { UserContext } from \"../App\";\r\n\r\nfunction RepoDetails() {\r\n    const usercontext = useContext(UserContext);\r\n    return (\r\n        <div>\r\n            <p>ID : {usercontext.usestate.repo.id}</p>\r\n            <p>Name : {usercontext.usestate.repo.name}</p>\r\n            <p>Full Name : {usercontext.usestate.repo.full_name}</p>\r\n            <p>Description : {usercontext.usestate.repo.description}</p>\r\n            <p>Fork : {usercontext.usestate.repo.fork}</p>\r\n            <p>Created at : {usercontext.usestate.repo.created_at}</p>\r\n            <p>Updated at : {usercontext.usestate.repo.updated_at}</p>\r\n            <p>Pushed at : {usercontext.usestate.repo.pushed_at}</p>\r\n            <p>Size : {usercontext.usestate.repo.size}</p>\r\n            <p>Language : {usercontext.usestate.repo.language}</p>\r\n            <p>Forks Count : {usercontext.usestate.repo.forks_count}</p>\r\n            <p>Open Issues : {usercontext.usestate.repo.open_issues}</p>\r\n            <p>Watchers : {usercontext.usestate.repo.watchers}</p>\r\n            <p>Default Branch : {usercontext.usestate.repo.default_branch}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepoDetails\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../App\";\r\nimport axios from \"axios\";\r\nimport RepoDetails from \"./RepoDetails\";\r\nimport { Table, Tag, Space } from 'antd';\r\nimport { RollbackOutlined } from '@ant-design/icons';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'ID',\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n      //   render: text => <a>{text}</a>,\r\n      },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    //   render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: 'Description',\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n          <Space size=\"middle\">\r\n            <a>View {record.name}</a>\r\n          </Space>\r\n        ),\r\n      },\r\n]\r\n\r\nfunction Repo() {\r\n  const usercontext = useContext(UserContext);\r\n\r\n  let repoClick = (data) => {\r\n    usercontext.usedispatch({ type: \"setShowRepos\", value: false });\r\n    usercontext.usedispatch({ type: \"setRepo\", value: data });\r\n  };\r\n  let homeClick = () => {\r\n    usercontext.usedispatch({ type: \"setShowRepos\", value: true });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(usercontext.usestate.user.repos_url)\r\n      .then((res) =>\r\n        usercontext.usedispatch({ type: \"setRepoData\", value: res.data })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }, [usercontext.usestate.user]);\r\n  return (\r\n    <div className=\"repo-main-div\">\r\n      <div className=\"repo-head\" >\r\n        Repositories\r\n        {usercontext.usestate.showRepos !== true && (\r\n        <>\r\n          <span>/{usercontext.usestate.repo.id}</span>\r\n          <RollbackOutlined onClick={homeClick} />\r\n          </>\r\n        )}\r\n      </div>\r\n      {usercontext.usestate.showRepos === true ? (\r\n        <div>\r\n            {usercontext.usestate.repoData.length !== 0 &&\r\n            <Table size=\"small\"\r\n             onRow={(record, rowIndex) => {\r\n                return {\r\n                  onClick: event => {repoClick(record)}, // click row\r\n                  onDoubleClick: event => {}, // double click row\r\n                  onContextMenu: event => {}, // right button click row\r\n                  onMouseEnter: event => {}, // mouse enter row\r\n                  onMouseLeave: event => {}, // mouse leave row\r\n                }\r\n            }}\r\n                columns={columns} dataSource={usercontext.usestate.repoData} />}\r\n          {/* <ul>\r\n            {usercontext.usestate.repoData.length !== 0 &&\r\n              usercontext.usestate.repoData.map((repo) => (\r\n                <li key={repo.id} onClick={() => repoClick(repo)}>\r\n                  {repo.id}\r\n                </li>\r\n              ))}\r\n          </ul> */}\r\n        </div>\r\n      ) : (\r\n        <RepoDetails />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Repo;\r\n","import React,{useContext} from 'react';\r\nimport { UserContext } from '../App';\r\nimport Profile from './Profile';\r\nimport Repo from './Repo';\r\n\r\nfunction MainBody() {\r\n    const usercontext = useContext(UserContext);\r\n    return (\r\n        \r\n        <div className=\"mainBody-div\">\r\n            <Profile/>\r\n            <Repo/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainBody\r\n","import React,{useReducer} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MainBody from './components/MainBody';\n\nexport const UserContext = React.createContext();\n\nconst initialState = {\n  user: {},\n  allusers:[],\n  users:[],\n  showList:false,\n  searchValue:\"\",\n  repoData:[],\n  userInfo:[],\n  showRepos:true,\n  repo:{},\n};\n\nconst reducer = (state, action) => {\n  \n  switch (action.type) {\n    case \"setUser\":{\n      return { ...state, user: action.value };\n    }\n    case \"setAllUsers\":{\n      return { ...state, allusers: action.value };\n    }\n    case \"setUsers\":{\n      return { ...state, users: action.value };\n    }\n    case \"setShowList\":{\n      return { ...state, showList: action.value };\n    }\n    case \"setSearchValue\":{\n      return { ...state, searchValue: action.value };\n    }\n    case \"setRepoData\":{\n      return { ...state, repoData: action.value };\n    }\n    case \"setUserInfo\":{\n      return { ...state, userInfo: action.value };\n    }\n    case \"setShowRepos\":{\n      return { ...state, showRepos: action.value };\n    }\n    case \"setRepo\":{\n      return { ...state, repo: action.value };\n    }\n     \n    \n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [userData,dispatch] = useReducer(reducer,initialState);\n  return (\n    <UserContext.Provider value={{ usestate: userData, usedispatch: dispatch }}>\n      <Header/>\n      {Object.keys(userData.user).length !== 0 &&<MainBody/>}\n      \n    </UserContext.Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}